find_program(git_executable NAMES git git.exe git.cmd)
if(NOT git_executable)
    message(FATAL_ERROR "Failed to find git.")
endif()

function(UpdateExternalLib name url rev)
    set(need_checkout FALSE)
    set(external_folder "${COMPILER_ROOT_DIR}/ThirdParty")
    set(external_lib_folder "${external_folder}/${name}")
    if(EXISTS "${external_lib_folder}/.git")
        message(STATUS "Updating ${name} to revision ${rev}...")
        execute_process(COMMAND "${git_executable}" "fetch" "origin" WORKING_DIRECTORY "${external_lib_folder}")
        execute_process(COMMAND "${git_executable}" "rev-parse" "HEAD" WORKING_DIRECTORY "${external_lib_folder}" OUTPUT_VARIABLE head_rev)
        string(STRIP ${head_rev} head_rev)
        if (${head_rev} STREQUAL ${rev})
            set(need_checkout FALSE)
        else()
            set(need_checkout TRUE)
        endif()
    else()
        message(STATUS "Cloning ${name} revision...")
        execute_process(COMMAND "${git_executable}" "clone" ${url} "-n" WORKING_DIRECTORY "${external_folder}")
        set(need_checkout TRUE)
    endif()
    if(need_checkout)
        message(STATUS "Checking out to revision ${rev}...")
        execute_process(COMMAND "${git_executable}" "reset" "--hard" WORKING_DIRECTORY "${external_lib_folder}")
        execute_process(COMMAND "${git_executable}" "checkout" "-q" ${rev} WORKING_DIRECTORY "${external_lib_folder}")
    endif()
    set(${ARGV3} ${need_checkout} PARENT_SCOPE)
endfunction()

function(UpdateNewestExternalLib name url)
    set(external_folder "${COMPILER_ROOT_DIR}/ThirdParty")
    set(external_lib_folder "${external_folder}/${name}")
    if(NOT EXISTS "${external_lib_folder}/.git")
        message(STATUS "Cloning ${name} revision...")
        execute_process(COMMAND "${git_executable}" "clone" ${url} WORKING_DIRECTORY "${external_folder}")
    endif()
    message(STATUS "Updating ${name} to HEAD")
    execute_process(COMMAND "${git_executable}" "reset" "--hard" WORKING_DIRECTORY "${external_lib_folder}")
    execute_process(COMMAND "${git_executable}" "pull" "origin" WORKING_DIRECTORY "${external_lib_folder}")
endfunction()

include("glm.cmake")
include("ext-mikktspace.cmake")
include("image.cmake")
include("spdlog.cmake")
include("cxxopts.cmake")
include("rapidjson.cmake")

add_subdirectory("${PROJECT_SOURCE_DIR}/ThirdParty/ForsythTriOO")

function(get_all_targets _result _dir)
    message("${_dir}")
    get_property(_subdirs DIRECTORY "${_dir}" PROPERTY SUBDIRECTORIES)
    foreach(_subdir IN LISTS _subdirs)
        get_all_targets(${_result} "${_subdir}")
    endforeach()
    get_property(_sub_targets DIRECTORY "${_dir}" PROPERTY BUILDSYSTEM_TARGETS)
    set(${_result} ${${_result}} ${_sub_targets} PARENT_SCOPE)
endfunction()
function(set_subdirectory_folder _folder _folder_name)
    get_all_targets(_targets "${_folder}")
    foreach(_target IN LISTS _targets)
        set_target_properties(
            ${_target}
            PROPERTIES FOLDER "${_folder_name}"
        )
    endforeach()
endfunction()

set_subdirectory_folder("${PROJECT_SOURCE_DIR}/ThirdParty/ForsythTriOO" "ThirdParty/ForsythTriOO")
set_target_properties("ext-mikktspace" PROPERTIES FOLDER "ThirdParty/ext-mikktspace")